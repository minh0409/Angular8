import { Directive, HostBinding, Input } from '@angular/core';
import { IdService } from '../common/id.service';
import { NavigationService } from './navigation.service';
var id = 0;
function nextId() {
    return id++;
}
/**
 * @hidden
 */
var LogicalRowDirective = /** @class */ (function () {
    function LogicalRowDirective(idService, navigation) {
        this.idService = idService;
        this.navigation = navigation;
        this.logicalSlaveRow = false;
        this.logicalSlaveCellsCount = 0;
        this.dataRowIndex = -1;
        this.uid = nextId();
    }
    Object.defineProperty(LogicalRowDirective.prototype, "hostRole", {
        get: function () {
            return this.logicalSlaveRow ? 'presentation' : 'row';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogicalRowDirective.prototype, "ariaRowIndex", {
        get: function () {
            return this.logicalRowIndex + 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogicalRowDirective.prototype, "ariaOwns", {
        get: function () {
            if (this.logicalSlaveRow || this.logicalSlaveCellsCount === 0) {
                return undefined;
            }
            var ids = [];
            var total = this.logicalCellsCount + this.logicalSlaveCellsCount;
            for (var cellIndex = this.logicalCellsCount; cellIndex < total; cellIndex++) {
                ids.push(this.idService.cellId(this.logicalRowIndex, cellIndex));
            }
            return ids.join(' ');
        },
        enumerable: true,
        configurable: true
    });
    LogicalRowDirective.prototype.ngOnChanges = function (changes) {
        if (!this.navigation.enabled || this.logicalSlaveRow) {
            return;
        }
        var indexChange = changes.logicalRowIndex;
        var logicalSlaveRowChange = changes.logicalSlaveRow;
        if (indexChange || logicalSlaveRowChange) {
            this.navigation.unregisterRow(this.uid);
            this.navigation.registerRow(this);
        }
    };
    LogicalRowDirective.prototype.ngOnDestroy = function () {
        this.navigation.unregisterRow(this.uid);
    };
    LogicalRowDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[kendoGridLogicalRow]'
                },] },
    ];
    /** @nocollapse */
    LogicalRowDirective.ctorParameters = function () { return [
        { type: IdService, },
        { type: NavigationService, },
    ]; };
    LogicalRowDirective.propDecorators = {
        'logicalRowIndex': [{ type: Input },],
        'logicalSlaveRow': [{ type: Input },],
        'logicalCellsCount': [{ type: Input },],
        'logicalSlaveCellsCount': [{ type: Input },],
        'dataRowIndex': [{ type: Input },],
        'dataItem': [{ type: Input },],
        'hostRole': [{ type: HostBinding, args: ['attr.role',] },],
        'ariaRowIndex': [{ type: HostBinding, args: ['attr.aria-rowindex',] },],
        'ariaOwns': [{ type: HostBinding, args: ['attr.aria-owns',] },],
    };
    return LogicalRowDirective;
}());
export { LogicalRowDirective };
